@page "/Registro/Prestamos"
@page "/Registro/Prestamos/{Id:int}"

@using System.Security.Claims

@inject AuthenticationStateProvider authStateProvider
@inject ClienteBLL clienteBLL
@inject CiudadBLL ciudadBLL
@inject ProvinciaBLL provinciaBLL
@inject UsuarioBLL usuarioBLL
@inject TipoPrestamoBLL tipoPrestamoBLL
@inject ePrestamoBLL eprestamoBLL
@inject IToastService toastService
@inject NavigationManager navManager


<div class="page">
	<div class="page-header">
		<div class="row align-items-center mw-100">
			<div class="col">
				<h2 class="page-title">
					<span class="text-truncate">Registro de Prestamos</span>
				</h2>
			</div>
			<div class="col-auto">
				<div class="btn-list">
					<a href="/Prestamos" class="btn btn-primary">
						<span class="oi oi-arrow-thick-left me-2"></span>Atrás
					</a>
				</div>
			</div>
		</div>
	</div>

	<div class="page-body">
		<div class="container-xl p-0">
			<div class="card">
				<EditForm Model="ePrestamo">
					<div class="card-body">

						<div class="row mb-2">
							<div class="col-12 col-md-8">
								<div class="row">
									<div class="col-12 col-md-5">
										<label class="form-label">Id Prestamo</label>
										<InputNumber @bind-Value="ePrestamo.IdPrestamo" disabled class="form-control" placeholder="ID" />
									</div>
								</div>
							</div>

							<div class="col-12 col-md-4 mt-2 mt-md-0">
								<label class="form-label">Fecha</label>
								<input class="form-control " type="date" disabled="@IsDisabled" @bind-value="ePrestamo.Fecha">
							</div>
						</div>

						<div class="row mb-2">
							<div class="col-12 col-md-4">
								<label class="form-label">Cliente</label>
								<div class="row g-2">
									<div class="col">
										<select class="form-select" disabled="@IsDisabled" @bind="ePrestamo.IdCliente">
											<option value="0" selected>Seleccionar un cliente</option>
											@foreach (var item in clientes)
											{
												<option value="@item.IdCliente">@(item.Nombres+" "+item.Apellidos)</option>
											}
										</select>
									</div>
								</div>
							</div>
							<div class="col-12 col-md-4 mt-2 mt-md-0">
								<label class="form-label">Fecha Inicio</label>
								<input class="form-control" type="date" disabled="@IsDisabled" @bind-value="ePrestamo.FechaInicio">
							</div>
							<div class="col-12 col-md-4 mt-2 mt-md-0">
								<label class="form-label">Fecha Vencimiento</label>
								<input class="form-control" type="date" @bind-value="ePrestamo.FechaVencimiento" disabled>
							</div>
						</div>

						<div class="row mb-2 border">
							<div class="col-12 col-md-2 mt-2 mb-2">
								<label class="form-label">Cuotas</label>
								<input type="number" class="form-control" disabled="@IsDisabled" @bind-value="ePrestamo.Cuotas" min="0" @onblur="CalcularFechaVencimiento" />
							</div>
							<div class="col-12 col-md-2 mt-2 mb-2">
								<label class="form-label">Capital</label>
								<input type="number" class="form-control" disabled="@IsDisabled" @bind-value="ePrestamo.Capital" min="0" placeholder="Capital" />
							</div>
							<div class="col-12 col-md-2 mt-2 mb-2">
								<label class="form-label">Interes (%)</label>
								<input type="number" class="form-control" disabled="@IsDisabled" @bind-value="ePrestamo.TasaInteres" min="0" placeholder="Capital" />
							</div>
							<div class="col-12 col-md-2 mt-2 mb-2">
								<label class="form-label">Mora (%)</label>
								<input type="number" class="form-control" disabled="@IsDisabled" @bind-value="ePrestamo.TasaMora" min="0" placeholder="Capital" />
							</div>
							<div class="col-12 col-md-2 mt-2 mb-2">
								<label class="form-label">Tipo Prestamo</label>
								<div class="row g-2">
									<div class="col">
										<select class="form-select" @bind="ePrestamo.IdTipoPrestamo" disabled="@IsDisabled" @onblur="CalcularFechaVencimiento">
											@foreach (var item in TipoPrestamo)
											{
												<option value="@item.IdTipoPrestamo">@item.Descripcion</option>
											}
										</select>
									</div>
								</div>
							</div>
							<div class="col-12 col-md-2 mt-md-4 mt-3 mb-3 text-center">
								<button class="btn btn-primary" disabled="@IsDisabled" @onclick="Calcular"><span class="oi oi-plus me-2"></span>Calcular</button>
							</div>

						</div>

						<div class="row mb-3">
							<div class="table-responsive">
								<table class="table">
									<thead>
										<tr>
											<th>NoCuota</th>
											<th>Fecha Cuota</th>
											<th>Capital</th>
											<th>Interes</th>
											<th>Total</th>
										</tr>
									</thead>
									<tbody class="table-tbody">
										@foreach (var item in ePrestamo.dPrestamos)
										{
											<tr>
												<td>@item.NoCuota</td>
												<td>@item.FechaCuota.ToShortDateString()</td>
												<td>@item.Capital</td>
												<td>@item.Interes</td>
												<td>@(item.Capital+item.Interes)</td>
											</tr>
										}
									</tbody>
								</table>
							</div>
						</div>


						<div class="row justify-content-end mt-1">
							<div class="col-7 col-md-5 col-xl-2">
								<label class="form-label">Total Capital</label>
								<input type="number" disabled class="form-control" @bind-value="TotalCapital" />
							</div>
						</div>

						<div class="row justify-content-end mt-1">
							<div class="col-7 col-md-5 col-xl-2">
								<label class="form-label">Total Interes</label>
								<input type="number" disabled class="form-control" @bind-value="TotalInteres" />
							</div>
						</div>

						<div class="row justify-content-end mt-1">
							<div class="col-7 col-md-5 col-xl-2">
								<label class="form-label">Total</label>
								<input type="number" disabled class="form-control" @bind-value="Total" />
							</div>
						</div>


						<div class="row mb-2 mt-3">
							<div class="col-12">
								<label class="form-label">Observaciones</label>
								<textarea class="form-control" disabled="@IsDisabled" @bind="ePrestamo.Observaciones" />
							</div>
						</div>

					</div>
					<div class="card-footer">
						<div class="text-center">
							<button type="submit" disabled="@IsDisabled" class="btn btn-success btn-lg"><span class="oi oi-plus me-2"></span>Guardar</button>
							<button type="button" disabled="@IsDisabled" class="btn btn-info btn-lg"><span class="oi oi-pencil me-2"></span>Editar</button>
						</div>
					</div>
				</EditForm>
			</div>
		</div>
	</div>
</div>


<h3>RPrestamos</h3>

@code {
	[Parameter]
	public int Id { get; set; }
	public decimal Total, TotalInteres, TotalCapital = 0;
	bool IsDisabled = false;
	public int Usuario { get; set; }

	ePrestamos ePrestamo = new ePrestamos();

	List<Clientes> clientes = new List<Clientes>();
	List<TipoPrestamos> TipoPrestamo = new List<TipoPrestamos>();

	protected override async Task OnInitializedAsync()
	{
		await LlenaClientes();
		await LlenaTipoPrestamos();

		var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
		ClaimsPrincipal usuario = (await customAuthStateProvider.GetAuthenticationStateAsync()).User;

		if (usuario.Claims.Any())
		{
			Usuario = Convert.ToInt32(usuario.Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);
		}

		await BuscarParametro();
	}

	private async Task BuscarParametro()
	{
		if (Id > 0)
		{
			ePrestamo = await eprestamoBLL.Buscar(Id);

			if (ePrestamo.EsNulo == false)
			{
				if (ePrestamo.IdPrestamo == 0)
				{
					ePrestamo = new ePrestamos();
					toastService.ShowError("Préstamo no encontrado");
					return;
				}
			}
			else
			{
				toastService.ShowError("El Préstamo está nulo");
				ePrestamo = new ePrestamos();
				return;
			}
			IsDisabled = true;
		}
	}

	private async Task LlenaClientes()
	{
		clientes = await clienteBLL.GetList(x => true);
	}

	private async Task LlenaTipoPrestamos()
	{
		TipoPrestamo = await tipoPrestamoBLL.GetList(x => true);
	}

	private async Task Calcular()
	{
		if (ePrestamo.Cuotas <= 0)
		{
			toastService.ShowInfo("El número de cuotas debe ser mayor a 0");
			return;
		}

		if (ePrestamo.Capital <= 0)
		{
			toastService.ShowInfo("El capital debe ser mayor a 0");
			return;
		}

		if (ePrestamo.IdTipoPrestamo == 1)
		{
			await CalcularAnual();
		}
		else if (ePrestamo.IdTipoPrestamo == 2)
		{
			await CalcularMensual();
		}
		else if (ePrestamo.IdTipoPrestamo == 3)
		{
			await CalcularSemanal();
		}
	}

	private async Task CalcularAnual()
	{
		DateTime FechaInicio = ePrestamo.FechaInicio.AddYears(1);
		decimal capital = ePrestamo.Capital / ePrestamo.Cuotas;
		decimal Interes = (ePrestamo.Capital * (ePrestamo.TasaInteres / 100)) / ePrestamo.Cuotas;

		ePrestamo.dPrestamos = new List<dPrestamos>();

		for (int x = 0; x < ePrestamo.Cuotas; x++)
		{
			ePrestamo.dPrestamos.Add(new dPrestamos
				{
					IdPrestamo = ePrestamo.IdPrestamo,
					NoCuota = x + 1,
					FechaCuota = FechaInicio,
					Capital = Utilitarios.ConverToN2(capital),
					Interes = Utilitarios.ConverToN2(Interes),
					BceCapital = Utilitarios.ConverToN2(capital),
					BceInteres = Utilitarios.ConverToN2(Interes)
				});
			FechaInicio = FechaInicio.AddYears(1);
		}

		TotalCapital = Utilitarios.ConverToN2(ePrestamo.Capital);
		TotalInteres = Utilitarios.ConverToN2(Interes * ePrestamo.Cuotas);
		Total = Utilitarios.ConverToN2(TotalCapital + TotalInteres);
	}


	private async Task CalcularMensual()
	{
		DateTime FechaInicio = ePrestamo.FechaInicio.AddMonths(1);
		decimal capital = ePrestamo.Capital / ePrestamo.Cuotas;
		decimal Interes = (ePrestamo.Capital * (ePrestamo.TasaInteres / 100)) / ePrestamo.Cuotas;

		ePrestamo.dPrestamos = new List<dPrestamos>();

		for (int x = 0; x < ePrestamo.Cuotas; x++)
		{
			ePrestamo.dPrestamos.Add(new dPrestamos
				{
					IdPrestamo = ePrestamo.IdPrestamo,
					NoCuota = x + 1,
					FechaCuota = FechaInicio,
					Capital = Utilitarios.ConverToN2(capital),
					Interes = Utilitarios.ConverToN2(Interes),
					BceCapital = Utilitarios.ConverToN2(capital),
					BceInteres = Utilitarios.ConverToN2(Interes)
				});
			FechaInicio = FechaInicio.AddMonths(1);
		}

		TotalCapital = Utilitarios.ConverToN2(ePrestamo.Capital);
		TotalInteres = Utilitarios.ConverToN2(Interes * ePrestamo.Cuotas);
		Total = Utilitarios.ConverToN2(TotalCapital + TotalInteres);
	}

	private async Task CalcularSemanal()
	{
		DateTime FechaInicio = ePrestamo.FechaInicio.AddDays(7);
		decimal capital = ePrestamo.Capital / ePrestamo.Cuotas;
		decimal Interes = (ePrestamo.Capital * (ePrestamo.TasaInteres / 100)) / ePrestamo.Cuotas;

		ePrestamo.dPrestamos = new List<dPrestamos>();

		for (int x = 0; x < ePrestamo.Cuotas; x++)
		{
			ePrestamo.dPrestamos.Add(new dPrestamos
				{
					IdPrestamo = ePrestamo.IdPrestamo,
					NoCuota = x + 1,
					FechaCuota = FechaInicio,
					Capital = Utilitarios.ConverToN2(capital),
					Interes = Utilitarios.ConverToN2(Interes),
					BceCapital = Utilitarios.ConverToN2(capital),
					BceInteres = Utilitarios.ConverToN2(Interes)
				});
			FechaInicio = FechaInicio.AddDays(7);
		}

		TotalCapital = Utilitarios.ConverToN2(ePrestamo.Capital);
		TotalInteres = Utilitarios.ConverToN2(Interes * ePrestamo.Cuotas);
		Total = Utilitarios.ConverToN2(TotalCapital + TotalInteres);
	}

	private async Task CalcularFechaVencimiento()
	{
		if (ePrestamo.IdTipoPrestamo == 1)
		{
			ePrestamo.FechaVencimiento = ePrestamo.FechaInicio.AddYears(ePrestamo.Cuotas);
		}
		else if (ePrestamo.IdTipoPrestamo == 2)
		{
			ePrestamo.FechaVencimiento = ePrestamo.FechaInicio.AddMonths(ePrestamo.Cuotas);
		}
		else if (ePrestamo.IdTipoPrestamo == 3)
		{
			ePrestamo.FechaVencimiento = ePrestamo.FechaInicio.AddDays(ePrestamo.Cuotas * 7);
		}
	}

}
