@layout LogInLayout
@page "/ConfirmarCodigo/{Id:int}"

@using System.Net.Mail
@using System.Text
@using System.Net.Mime
@using System.Net
@using PayCredApp.Configuraciones

@inject IToastService toastService
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navManager

@inject UsuarioBLL usuarioBLL

<EditForm Model="@model" OnValidSubmit="@Comprobar">
	<DataAnnotationsValidator />
	<div class="card-body">
		<h1 class="text-center mb-4">Recuperar Contraseña</h1>

		<div class="mb-3">
			<label class="form-label">Código</label>
			<InputText  @bind-Value="model.Codigo" type="text" class="form-control" placeholder="Ingresar código de 7 digitos" />
			<ValidationMessage For="() => model.Codigo" />
		</div>

		<div class="mb-2">
			<a href="/">Volver al Login</a>
		</div>

		<div class="form-footer">
			<button type="submit" class="btn btn-primary w-100" style="font-size:16px;">Comprobar Codigo<span class="oi oi-account-login ms-2"></span></button>
		</div>
	</div>
</EditForm>

@code {
	private class LoginViewModel
	{
		[Required(ErrorMessage = "Código es requerido")]
		public string Codigo { get; set; } = "";
	}

	[Parameter]
	public int Id { get; set; }

	LoginViewModel model = new LoginViewModel();

	Usuarios usuario = new Usuarios();

	protected override async Task OnInitializedAsync()
	{
		await BuscarParametro();
	}

	private async Task Comprobar(EditContext editContext)
	{
		if (string.IsNullOrWhiteSpace(model.Codigo))
		{
			toastService.ShowInfo("Debe ingresar el código de recuperación, enviado a su correo", "Recuperación");
			return;
		}

		if(usuario.FechaExpiracion < DateTime.Now)
			navManager.NavigateTo("/Recuperacion");

		if (model.Codigo == usuario.Token)
			navManager.NavigateTo($"/CambiarContrasena/{usuario.IdUsuario}");
		else
			toastService.ShowInfo("Código incorrecto");
	}

	private async Task BuscarParametro()
	{
		if (Id > 0)
		{
			usuario = await usuarioBLL.Buscar(Id);

			if (usuario.EsNulo == false)
			{
				if (usuario == null)
				{
					usuario = new Usuarios();
				}
			}
			else
			{
				toastService.ShowError("El Usuario está nulo no puede recuperar contraseña");
				usuario = new Usuarios();
			}
		}
	}
}