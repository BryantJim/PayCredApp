@page "/Registro/Cobros"
@page "/Registro/Cobros/{Id:int}"

@using System.Security.Claims

@inject AuthenticationStateProvider authStateProvider
@inject ClienteBLL clienteBLL
@inject CiudadBLL ciudadBLL
@inject ProvinciaBLL provinciaBLL
@inject eCobroBLL ecobroBLL
@inject UsuarioBLL usuarioBLL
@inject TipoPrestamoBLL tipoPrestamoBLL
@inject ePrestamoBLL eprestamoBLL
@inject IToastService toastService
@inject NavigationManager navManager


<div class="page">

	<div class="page-header">
		<div class="row align-items-center mw-100">
			<div class="col">
				<h2 class="page-title">
					<span class="text-truncate">Registro de Cobros</span>
				</h2>
			</div>
			<div class="col-auto">
				<div class="btn-list">
					<a href="/Cobros" class="btn btn-primary">
						<span class="oi oi-arrow-thick-left me-2"></span>Atrás
					</a>
				</div>
			</div>
		</div>
	</div>

	<div class="page-body">
		<div class="container-xl p-0">
			<div class="card">

				<EditForm Model="eCobro" OnValidSubmit="Guardar">

					<div class="card-body">

						<div class="row mb-2">
							<div class="col-12 col-md-8">
								<div class="row">
									<div class="col-12 col-md-5">
										<label class="form-label">Id Cobro</label>
										<InputNumber @bind-Value="eCobro.IdCobro" class="form-control" placeholder="ID" disabled />
									</div>
								</div>
							</div>
							<div class="col-12 col-md-4 mt-2 mt-md-0">
								<label class="form-label">Fecha</label>
								<input class="form-control " type="date" disabled="@IsDisabled" @bind-value="eCobro.Fecha">
							</div>
						</div>

						<div class="row mb-2">
							<div class="col-12 col-md-4">
								<label class="form-label">Cliente</label>
								<div class="row g-2">
									<div class="col">
										<select class="form-select" @bind="eCobro.IdCliente" @onblur="LlenarPrestamos" disabled="@IsDisabled">
											<option value="0" selected>Seleccionar un cliente</option>
											@foreach (var item in clientes)
											{
												<option value="@item.IdCliente">@(item.Nombres+" "+item.Apellidos)</option>
											}
										</select>
									</div>
								</div>
							</div>
							<div class="col-12 col-md-4 mt-2 mt-md-0">
								<label class="form-label">Prestamo</label>
								<div class="row g-2">
									<div class="col">
										<select class="form-select" @bind="eCobro.IdPrestamo" @onblur="LlenarGrid" disabled="@IsDisabled">
											<option value="0" selected>Seleccionar un Prestamo</option>
											@foreach (var item in eprestamos)
											{
												<option value="@item.IdPrestamo">@($"{item.IdPrestamo} - {item.Clientes.Nombres} {item.Clientes.Apellidos} - {item.Capital}")</option>
											}
										</select>
									</div>
								</div>
							</div>

							<div class="col-12 col-md-4 mt-2 mt-md-0">
								<div class="row g-2">
									<div class="col">
										<label class="form-label">Monto a Pagar</label>
										<input class="form-control" type="number" min="0" step="0.01" @bind-value="eCobro.Monto" disabled="@IsDisabled" />
									</div>
									<div class="col-auto mt-4">
										<button type="button" disabled="@IsDisabled" class="btn btn-primary" @onclick="Pagar"><span class="oi oi-plus me-2"></span>Pagar</button>
									</div>
								</div>
							</div>
						</div>

						<div class="row mb-3">
							<div class="table-responsive">
								<table class="table">
									<thead>
										<tr>
											<th>NoCuota</th>
											<th>Fecha Cuota</th>
											<th>Capital</th>
											<th>Interes</th>
											<th>Mora</th>
											<th>Total</th>
											<th>Pago</th>
										</tr>
									</thead>
									<tbody class="table-tbody">
										@foreach (var item in CobroPendientes)
										{
											<tr>
												<td>@item.NoCuota</td>
												<td>@item.FechaCuota.ToShortDateString()</td>
												<td>@item.Capital</td>
												<td>@item.Interes</td>
												<td>@item.Mora</td>
												<td>@item.Total</td>
												<td>@item.TotalAPagar</td>
											</tr>
										}
									</tbody>
								</table>
							</div>
						</div>

						<div class="row justify-content-end mt-1">
							<div class="col-7 col-md-5 col-xl-2">
								<label class="form-label">Monto</label>
								<input type="number" disabled class="form-control" @bind-value="eCobro.Monto" />
							</div>
						</div>

						<div class="row justify-content-end mt-1">
							<div class="col-7 col-md-5 col-xl-2">
								<label class="form-label">Descuento</label>
								<input type="number" class="form-control" disabled="@IsDisabled" @bind-value="eCobro.Descuento" @onblur="Descuento" />
							</div>
						</div>

						<div class="row justify-content-end mt-1">
							<div class="col-7 col-md-5 col-xl-2">
								<label class="form-label">Total</label>
								<input type="number" disabled class="form-control" @bind-value="Total" />
							</div>
						</div>

						<div class="row mb-2 mt-3">
							<div class="col-12">
								<label class="form-label">Observaciones</label>
								<textarea class="form-control" @bind="eCobro.Observaciones" disabled="@IsDisabled" />
							</div>
						</div>
					</div>
					<div class="card-footer">
						<div class="text-center">
							<button type="submit" disabled="@IsDisabled" class="btn btn-success btn-lg"><i class="fa-solid fa-floppy-disk me-2"></i>Guardar</button>
							<button type="button" disabled="@IsDisabledButtons" class="btn btn-info btn-lg" style="background-color:#25d366;"><i class="fa-brands fa-whatsapp me-2"></i>Enviar a WhatsApp</button>
							<button type="button" disabled="@IsDisabledButtons" class="btn btn-secondary btn-lg"><i class="fa-solid fa-envelope me-2"></i>Enviar al Correo</button>
							<button type="button" disabled="@IsDisabledButtons" class="btn btn-danger btn-lg" @onclick="Eliminar"><i class="fa-solid fa-trash-can me-2"></i>Eliminar</button>
						</div>
					</div>
				</EditForm>



			</div>
		</div>
	</div>

</div>

@code {
	[Parameter]
	public int Id { get; set; }
	public decimal Total = 0;
	public decimal Mora = 0;
	bool IsDisabled = false;
	bool IsDisabledButtons = true;
	public int Usuario { get; set; }

	eCobros eCobro = new eCobros();
	ePrestamos ePrestamo = new ePrestamos();

	List<Clientes> clientes = new List<Clientes>();
	List<ePrestamos> eprestamos = new List<ePrestamos>();

	ModeloCobro CobroPendiente = new ModeloCobro();
	List<ModeloCobro> CobroPendientes = new List<ModeloCobro>();

	protected override async Task OnInitializedAsync()
	{
		await LlenarListas();

		var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
		ClaimsPrincipal usuario = (await customAuthStateProvider.GetAuthenticationStateAsync()).User;

		if (usuario.Claims.Any())
		{
			Usuario = Convert.ToInt32(usuario.Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);
		}

		await BuscarParametro();
	}

	private async Task BuscarParametro()
	{
		if (Id > 0)
		{
			eCobro = await ecobroBLL.Buscar(Id);

			if (eCobro.EsNulo == false)
			{
				if (eCobro.IdCobro == 0)
				{
					eCobro = new eCobros();
					toastService.ShowError("Cobro no encontrado");
					return;
				}
			}
			else
			{
				toastService.ShowError("El Cobro está nulo");
				eCobro = new eCobros();
				return;
			}

			Total = Utilitarios.ConverToN2(eCobro.Monto - eCobro.Descuento);

			IsDisabled = true;
			IsDisabledButtons = false;
			await LlenarGridBuscar();
		}
	}

	private async Task LlenarListas()
	{
		clientes = await clienteBLL.GetList(x => true);
		eprestamos = await eprestamoBLL.GetList(x => true);
	}

	private void LlenarCobrosPendientes()
	{
		if (ePrestamo != null)
		{
			foreach (var item in ePrestamo.dPrestamos)
			{
				if (item.BceCapital > 0)
				{
					CobroPendiente = new ModeloCobro();
					CobroPendiente.NoCuota = item.NoCuota;
					CobroPendiente.FechaCuota = item.FechaCuota;
					CobroPendiente.Capital = item.BceCapital;
					CobroPendiente.Interes = item.BceInteres;
					CobroPendiente.Mora = CalcularMora(item.BceCapital, ePrestamo.TasaMora, item.FechaCuota);
					CobroPendiente.Total = CobroPendiente.Capital + CobroPendiente.Interes + CobroPendiente.Mora;
					CobroPendiente.TotalAPagar = 0;

					CobroPendientes.Add(CobroPendiente);
				}
			}
		}
	}

	private async Task LlenarGridBuscar()
	{
		ePrestamo = await eprestamoBLL.Buscar(eCobro.IdPrestamo);
		CobroPendientes = new List<ModeloCobro>();

		foreach (var item in eCobro.dCobros)
		{
			CobroPendiente = new ModeloCobro();
			CobroPendiente.NoCuota = item.NoCuota;
			CobroPendiente.FechaCuota = item.FechaCuota;
			CobroPendiente.Capital = item.CapitalCobrado;
			CobroPendiente.Interes = item.InteresCobrado;
			CobroPendiente.Mora = item.MoraCobrada;
			CobroPendiente.Total = CobroPendiente.Capital + CobroPendiente.Interes + CobroPendiente.Mora;
			CobroPendiente.TotalAPagar = CobroPendiente.Total;

			CobroPendientes.Add(CobroPendiente);
		}
	}

	private async Task LlenarGrid()
	{
		ePrestamo = await eprestamoBLL.Buscar(eCobro.IdPrestamo);
		CobroPendientes = new List<ModeloCobro>();

		if (ePrestamo.IdPrestamo > 0)
		{
			eCobro.IdCliente = ePrestamo.IdCliente;
			LlenarCobrosPendientes();
		}
		else
		{
			eCobro = new eCobros();
		}
	}

	private async Task LlenarPrestamos()
	{
		eprestamos = await eprestamoBLL.GetList(x => true);

		if (eCobro.IdCliente > 0)
		{
			eprestamos = eprestamos.Where(x => x.IdCliente == eCobro.IdCliente).ToList();
			eCobro.IdPrestamo = 0;
		}
	}

	private decimal CalcularMora(decimal Capital, decimal TasaMora, DateTime FechaCuota)
	{
		Mora = 0;
		decimal MontoMoraxDia = Capital * (TasaMora / 100);

		int DiasAtrazados = (DateTime.Now - FechaCuota).Days;

		if (DiasAtrazados > 0)
			DiasAtrazados -= ePrestamo.TipoPrestamos.DiaGracias;

		if (DiasAtrazados < 0)
			DiasAtrazados = 0;

		Mora = (MontoMoraxDia * DiasAtrazados);

		eCobro.MoraCobrada += Mora;

		return Math.Round(Mora, 2);
	}

	private async Task Pagar()
	{
		if (eCobro.Monto > 0)
		{
			if (eCobro.Monto > (ePrestamo.BceCapital + ePrestamo.BceInteres))
			{
				toastService.ShowWarning($"El monto a pagar no puede ser mayor al Monto {ePrestamo.BceCapital + ePrestamo.BceInteres} del prestamo");
				return;
			}

			decimal MontoAPagar = Utilitarios.ConverToN2(eCobro.Monto);
			eCobro.Monto = Utilitarios.ConverToN2(eCobro.Monto);
			Total = 0;

			foreach (var item in CobroPendientes)
			{
				if (MontoAPagar >= item.Total)
					item.TotalAPagar = item.Total;
				else
					item.TotalAPagar = MontoAPagar;

				MontoAPagar -= item.TotalAPagar;

				Total += item.TotalAPagar;
			}
		}
	}

	private async Task Descuento()
	{
		if (eCobro.Descuento > 0)
			Total -= eCobro.Descuento;
		else
			Total = eCobro.Monto;
	}

	private async Task Guardar()
	{
		decimal Interes, Capital, Mora = 0;

		if (Total < 0 && eCobro.Descuento > 0)
		{
			toastService.ShowError("El total no puede ser menor que 0", "Total");
			return;
		}

		if (eCobro.IdPrestamo < 1)
		{
			toastService.ShowInfo("Seleccione un préstamo");
			return;
		}

		foreach (var item in CobroPendientes)
		{
			decimal Monto = item.TotalAPagar;

			if (Monto < 1)
				break;

			if (Monto >= item.Interes)
				Interes = item.Interes;
			else
				Interes = Monto;

			Monto -= Interes;

			if (Monto >= item.Mora)
				Mora = item.Mora;
			else
				Mora = Monto;

			Monto -= Mora;

			Capital = Monto;

			eCobro.dCobros.Add(new dCobros
				{
					IdCobro = eCobro.IdCobro,
					IdPrestamo = eCobro.IdPrestamo,
					NoCuota = item.NoCuota,
					FechaCuota = item.FechaCuota,
					CapitalCobrado = Capital,
					InteresCobrado = Interes,
					MoraCobrada = Mora
				});


			eCobro.CapitalCobrado += Capital;
			eCobro.InteresCobrado += Interes;
			eCobro.MoraCobrada += Mora;
		}

		eCobro.Usuarios = await usuarioBLL.Buscar(Usuario);
		var paso = await ecobroBLL.Guardar(eCobro);

		if (paso)
		{
			toastService.ShowSuccess("Cobro Guardado!!!");
			navManager.NavigateTo("/Cobros");
		}

	}

	private async Task Eliminar()
	{
		var paso = false;
		var CobrosEliminar = await ecobroBLL.Buscar(eCobro.IdCobro);
		var dCobroEliminar = CobrosEliminar.dCobros.Last();

		var Cobros = await ecobroBLL.GetList(x => true && x.EsNulo == false);
		var LastCobro = Cobros.Last();
		var LastDCobro = LastCobro.dCobros.Last();

		if (dCobroEliminar.NoCuota == LastDCobro.NoCuota && dCobroEliminar.IdCobro == LastDCobro.IdCobro)
		{
			paso = await ecobroBLL.Eliminar(eCobro.IdCobro);
			toastService.ShowSuccess("Cobros eliminado");
			navManager.NavigateTo("/Cobros");
		}
		else
		{
			toastService.ShowError("No puede eliminar este cobro porque no es el último Cobro");
			return;
		}
	}

	private class ModeloCobro
	{
		public int NoCuota { get; set; }
		public DateTime FechaCuota { get; set; }
		public decimal Capital { get; set; }
		public decimal Interes { get; set; }
		public decimal Mora { get; set; }
		public decimal Total { get; set; }
		public decimal TotalAPagar { get; set; }
	}
}

